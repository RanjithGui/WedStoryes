@file:OptIn(ExperimentalMaterial3Api::class)
package com.example.wedstoryes.presentation

import android.Manifest
import android.app.NotificationChannel
import android.app.NotificationManager
import android.app.PendingIntent
import android.content.Context
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Paint
import android.graphics.Typeface
import android.graphics.pdf.PdfDocument
import android.os.Build
import android.os.Environment
import android.widget.Toast
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Share
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.draw.shadow
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.FilterQuality
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.Font
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.font.FontStyle
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.app.NotificationCompat
import androidx.core.content.ContextCompat
import androidx.core.content.FileProvider
import androidx.lifecycle.compose.collectAsStateWithLifecycle
import androidx.navigation.NavController
import coil.compose.rememberAsyncImagePainter
import com.example.wedstoryes.R
import com.example.wedstoryes.data.ClientDetails
import com.example.wedstoryes.data.OwnerDetails
import java.io.File
import java.io.FileOutputStream

@Composable
fun PdfQuotationScreen(
    onDownloadPdf: () -> Unit = {},viewmodel: GlobalViewmodel,navController: NavController
) {
    val context = LocalContext.current
    var pdfGenerated by remember { mutableStateOf(false) }
    var pdfFile by remember { mutableStateOf<File?>(null) }
    var showPermissionDialog by remember { mutableStateOf(false) }
    val state: GlobalState by viewmodel.state.collectAsStateWithLifecycle()
    val eventDetails = state.events.find {
        it.title == state.selectedEventItem?.title
    }

    // Permission launcher for Android 13+ (Notification permission)
    val notificationPermissionLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestPermission()
    ) { isGranted ->
        if (!isGranted) {
            Toast.makeText(context, "Notification permission denied", Toast.LENGTH_SHORT).show()
        }
    }

    // Permission launcher for Android 12 and below (Storage permission)
    val storagePermissionLauncher = rememberLauncherForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        val allGranted = permissions.values.all { it }
        if (allGranted) {
            generateAndSavePDF(context,state) { file ->
                if (file != null) {
                    pdfFile = file
                    pdfGenerated = true
                    showNotification(context, file)
                    Toast.makeText(context, "PDF Generated Successfully!", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(context, "Failed to generate PDF", Toast.LENGTH_SHORT).show()
                }
            }
            onDownloadPdf()
        } else {
            showPermissionDialog = true
        }
    }

    // Permission explanation dialog
    if (showPermissionDialog) {
        AlertDialog(
            onDismissRequest = { showPermissionDialog = false },
            title = { Text("Permission Required") },
            text = { Text("Storage permission is required to save the PDF file. Please grant the permission in app settings.") },
            confirmButton = {
                TextButton(onClick = { showPermissionDialog = false }) {
                    Text("OK")
                }
            }
        )
    }
    fun checkAndRequestPermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // Android 13+ - Check notification permission
            when {
                ContextCompat.checkSelfPermission(
                    context,
                    Manifest.permission.POST_NOTIFICATIONS
                ) == PackageManager.PERMISSION_GRANTED -> {
                    // Permission granted, generate PDF
                    generateAndSavePDF(context,state) { file ->
                        if (file != null) {
                            pdfFile = file
                            pdfGenerated = true
                            showNotification(context, file)
                            Toast.makeText(context, "PDF Generated Successfully!", Toast.LENGTH_SHORT).show()
                        } else {
                            Toast.makeText(context, "Failed to generate PDF", Toast.LENGTH_SHORT).show()
                        }
                    }
                    onDownloadPdf()
                }
                else -> {
                    notificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS)
                    // Still generate PDF even if notification permission is denied
                    generateAndSavePDF(context,state) { file ->
                        if (file != null) {
                            pdfFile = file
                            pdfGenerated = true
                            Toast.makeText(context, "PDF Generated Successfully!", Toast.LENGTH_SHORT).show()
                        }
                    }
                    onDownloadPdf()
                }
            }
        } else {
            // Android 12 and below - Check storage permission
            val permissions = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                // Android 10+ uses scoped storage, no permission needed
                emptyArray()
            } else {
                arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE)
            }

            if (permissions.isEmpty() || permissions.all {
                    ContextCompat.checkSelfPermission(context, it) == PackageManager.PERMISSION_GRANTED
                }) {
                // Permission granted or not needed
                generateAndSavePDF(context,state) { file ->
                    if (file != null) {
                        pdfFile = file
                        pdfGenerated = true
                        showNotification(context, file)
                        Toast.makeText(context, "PDF Generated Successfully!", Toast.LENGTH_SHORT).show()
                    } else {
                        Toast.makeText(context, "Failed to generate PDF", Toast.LENGTH_SHORT).show()
                    }
                }
                onDownloadPdf()
            } else {
                storagePermissionLauncher.launch(permissions)
            }
        }
    }

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(Color(0xFFF5F5F5))
            .padding(16.dp)
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            Box(modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 26.dp)) {
                Image(
                    painter = painterResource(com.example.wedstoryes.R.drawable.back_button),
                    contentDescription = null,
                    modifier = Modifier
                        .padding(top = 60.dp)
                        .size(24.dp)
                        .align(Alignment.TopStart)
                        .clickable { navController.popBackStack() },
                )

                Text(
                    text = "Preview",
                    modifier = Modifier
                        .padding(top = 54.dp, start = 48.dp, end = 24.dp)
                        .fillMaxWidth()
                        .align(Alignment.TopCenter),
                    fontSize = 25.sp,
                    textAlign = TextAlign.Center,
                    fontWeight = FontWeight.SemiBold,
                    color = colorResource(com.example.wedstoryes.R.color.wedstoreys),
                    fontStyle = FontStyle.Italic,
                    fontFamily = FontFamily(Font(R.font.italianno_regular, FontWeight.Normal))
                )

            }// PDF Preview Content
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .shadow(8.dp, RoundedCornerShape(8.dp)),
                shape = RoundedCornerShape(8.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxSize()
                        .verticalScroll(rememberScrollState())
                        .padding(20.dp)
                ) {
                    LogoSelectionSection(R.drawable.camera, onLogoClick = {}, onClearLogo = {})
                    QuotationHeader()
                    Spacer(modifier = Modifier.height(16.dp))
                    ClientCompanyInfo(clientDetails = eventDetails?.clientDetails, ownerDetails = eventDetails?.ownerDetails)
                    Spacer(modifier = Modifier.height(24.dp))
                    Text(
                        text = "Dear ${eventDetails?.clientDetails?.name}",
                        fontSize = 14.sp,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Spacer(modifier = Modifier.height(8.dp))
                    Text(
                        text = "Thank you for choosing The wedstoryes for your big day. Please find the quotation below.",
                        fontSize = 14.sp,
                        modifier = Modifier.fillMaxWidth()
                    )
                    Spacer(modifier = Modifier.height(20.dp))
                    EventsTable()
                    Spacer(modifier = Modifier.height(20.dp))
                    PhotobookSection()
                    Spacer(modifier = Modifier.height(24.dp))
                    TermsAndConditions()
                    Spacer(modifier = Modifier.height(24.dp))
                    AmountSummary()
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            // Action Buttons
            // Action Buttons
            if (!pdfGenerated) {
                Column {
                    Button(
                        onClick = { checkAndRequestPermissions() },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(56.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Icon(
                            imageVector = Icons.Default.Share,
                            contentDescription = "Generate PDF",
                            modifier = Modifier.size(24.dp)
                        )
                        Spacer(modifier = Modifier.width(12.dp))
                        Text(
                            text = "Generate PDF",
                            fontSize = 16.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }

            } else {
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(12.dp)
                ) {
                    // 1. Share PDF button
                    Button(
                        onClick = {
                            pdfFile?.let { file ->
                                // For general sharing, pass null to targetPackage to let the user choose
                                // To specifically target WhatsApp, you could pass "com.whatsapp" or "com.whatsapp.w4b"
                                sharePdf(context, file, null) // or "com.whatsapp"
                            }
                        },
                        modifier = Modifier
                            .weight(1f)
                            .height(56.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.primary
                        )
                    ) {
                        Icon(
                            imageVector = Icons.Default.Share,
                            contentDescription = "Share PDF",
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "Share PDF",
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }

                    // 2. Preview (External) button
                    Button(
                        onClick = {
                            pdfFile?.let { file ->
                                previewPDF(context, file)
                            }
                        },
                        modifier = Modifier
                            .weight(1f)
                            .height(56.dp),
                        shape = RoundedCornerShape(12.dp),
                        colors = ButtonDefaults.buttonColors(
                            containerColor = MaterialTheme.colorScheme.secondary
                        )
                    ) {
                        Icon(
                            imageVector = Icons.Default.Share,
                            contentDescription = "Open PDF externally",
                            modifier = Modifier.size(20.dp)
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(
                            text = "Open PDF",
                            fontSize = 14.sp,
                            fontWeight = FontWeight.Medium
                        )
                    }
                }
                Spacer(modifier = Modifier.height(12.dp))

                // 3. New PDF button (in a separate row for better layout)
                Button(
                    onClick = {
                        pdfGenerated = false
                        pdfFile = null // Clear the PDF file state to show the static preview again
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(56.dp),
                    shape = RoundedCornerShape(12.dp),
                    colors = ButtonDefaults.buttonColors(
                        containerColor = MaterialTheme.colorScheme.tertiary
                    )
                ) {
                    Icon(
                        imageVector = Icons.Default.Add,
                        contentDescription = "Generate New",
                        modifier = Modifier.size(20.dp)
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(
                        text = "Generate New PDF",
                        fontSize = 14.sp,
                        fontWeight = FontWeight.Medium
                    )
                }

                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 12.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFE8F5E8)
                    )
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp),
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Text(
                            text = "✓ PDF saved to wedstoryes/quotations",
                            fontSize = 14.sp,
                            color = Color(0xFF2E7D32),
                            modifier = Modifier.weight(1f)
                        )
                    }
                }
            }
        }
        }
    }




fun createNotificationChannel(context: Context) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
        val channelId = "pdf_download_channel"
        val channelName = "PDF Downloads"
        val channelDescription = "Notifications for PDF downloads"
        val importance = NotificationManager.IMPORTANCE_DEFAULT

        val channel = NotificationChannel(channelId, channelName, importance).apply {
            description = channelDescription
        }

        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
        notificationManager.createNotificationChannel(channel)
    }
}

// Show notification after PDF generation
fun showNotification(context: Context, file: File) {
    createNotificationChannel(context)

    val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager

    // Intent to open the PDF
    val uri = FileProvider.getUriForFile(
        context,
        "${context.packageName}.fileprovider",
        file
    )

    val intent = Intent(Intent.ACTION_VIEW).apply {
        setDataAndType(uri, "application/pdf")
        flags = Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_GRANT_READ_URI_PERMISSION
    }

    val pendingIntent = PendingIntent.getActivity(
        context,
        0,
        intent,
        PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
    )

    val notification = NotificationCompat.Builder(context, "pdf_download_channel")
        .setSmallIcon(android.R.drawable.stat_sys_download_done)
        .setContentTitle("PDF Generated")
        .setContentText("Komali_Wedding_Quotation.pdf saved successfully")
        .setPriority(NotificationCompat.PRIORITY_DEFAULT)
        .setContentIntent(pendingIntent)
        .setAutoCancel(true)
        .build()

    notificationManager.notify(1, notification)
}


// PDF Generation Function
fun generateAndSavePDF(context: Context, state: GlobalState,onComplete: (File?) -> Unit) {
    try {
        val pdfDocument = PdfDocument()
        val pageWidth = 595
        val pageHeight = 842
        val margin = 20
        val contentWidth = pageWidth - (2 * margin)
        var currentPage = 1
        var yPosition = margin + 20

        val pageInfo = PdfDocument.PageInfo.Builder(pageWidth, pageHeight, currentPage).create()
        var page = pdfDocument.startPage(pageInfo)
        var canvas = page.canvas

        // Paint objects
        val titlePaint = Paint().apply {
            textSize = 24f
            typeface = Typeface.DEFAULT_BOLD
            color = android.graphics.Color.BLACK
            textAlign = Paint.Align.CENTER
        }

        val headerPaint = Paint().apply {
            textSize = 16f
            typeface = Typeface.DEFAULT_BOLD
            color = android.graphics.Color.BLACK
        }

        val normalPaint = Paint().apply {
            textSize = 12f
            typeface = Typeface.DEFAULT
            color = android.graphics.Color.BLACK
        }

        val smallPaint = Paint().apply {
            textSize = 10f
            typeface = Typeface.DEFAULT
            color = android.graphics.Color.BLACK
        }

        val borderPaint = Paint().apply {
            strokeWidth = 1f
            color = android.graphics.Color.BLACK
            style = Paint.Style.STROKE
        }

        fun checkNewPage(requiredHeight: Int): Boolean {
            if (yPosition + requiredHeight > pageHeight - margin) {
                pdfDocument.finishPage(page)
                currentPage++
                val newPageInfo = PdfDocument.PageInfo.Builder(pageWidth, pageHeight, currentPage).create()
                page = pdfDocument.startPage(newPageInfo)
                canvas = page.canvas
                yPosition = margin + 50
                return true
            }
            return false
        }

        // [Draw content - same as original generatePDF function]
        // Draw Header
        val rightAlignedHeaderPaint = Paint(headerPaint).apply {
            textAlign = Paint.Align.RIGHT
        }
        val rightAlignedNormalPaint = Paint(normalPaint).apply {
            textAlign = Paint.Align.RIGHT
        }
        val fromDetailsX = (pageWidth - margin).toFloat()
        canvas.drawText("Date: 23-Jul-25", fromDetailsX, yPosition.toFloat(), rightAlignedNormalPaint)
        yPosition += 50
        canvas.drawText("Quotation", pageWidth / 2f, yPosition.toFloat(), titlePaint)
        yPosition += 40


    // Draw To/From Section
    checkNewPage(120)

        // "To:" section (remains left-aligned)
        val toX = margin.toFloat()
        canvas.drawText("To:", toX, yPosition.toFloat(), headerPaint) // headerPaint should have Align.LEFT

        // "From:" section (right-aligned)
        val fromLabelX = (pageWidth / 2f) + (margin / 2f) // Example: Start "From:" label a bit past the center
        // Or a fixed offset from the right: (pageWidth - margin - estimatedLabelWidth).toFloat()
        // This will be the RIGHT edge for right-aligned text

        // Create a new paint or modify an existing one for right alignment if headerPaint is not already right-aligned


        // Draw "From:" label. If you want "From:" itself to be left-aligned but STARTING from the right:
        // val fromLabelPaint = Paint(headerPaint).apply { textAlign = Paint.Align.LEFT }
        // canvas.drawText("From:", fromLabelX, yPosition.toFloat(), fromLabelPaint)
        // OR, if you want "From:" to be right-aligned with its content:
        canvas.drawText("From:", fromDetailsX, yPosition.toFloat(), rightAlignedHeaderPaint)


        yPosition += 25 // Move down for the details

        // Client details (left side)
        canvas.drawText("Komali", toX, yPosition.toFloat(), normalPaint) // normalPaint should have Align.LEFT

        // Company details (right side, right-aligned)
        canvas.drawText("The wedstoryes", fromDetailsX, yPosition.toFloat(), rightAlignedNormalPaint)
        yPosition += 20

        canvas.drawText("rajeshputti21@gmail.com", toX, yPosition.toFloat(), normalPaint)
        canvas.drawText("thewedstoryes2019@gmail.com", fromDetailsX, yPosition.toFloat(), rightAlignedNormalPaint)
        yPosition += 20

        canvas.drawText("+91 80088 92188", toX, yPosition.toFloat(), normalPaint)
        canvas.drawText("9030709090", fromDetailsX, yPosition.toFloat(), rightAlignedNormalPaint)
        yPosition += 50 // Space after the To/From block

    // Thank you message
    checkNewPage(60)
    canvas.drawText("Dear Komali,", margin.toFloat(), yPosition.toFloat(), normalPaint)
    yPosition += 25
    canvas.drawText("Thank you for choosing The wedstoryes for your big day.", margin.toFloat(), yPosition.toFloat(), normalPaint)
    yPosition += 20
    canvas.drawText("Please find the quotation below.", margin.toFloat(), yPosition.toFloat(), normalPaint)
    yPosition += 40

    // Events Table Header
        val tableContentWidth = pageWidth - (2 * margin)

        // Events Table Header
        checkNewPage(200) // Increased needed height for potentially taller wrapped headers
        val tableStartY = yPosition
        val headerBackgroundPaint = Paint().apply {
            color = android.graphics.Color.RED // Red background
            style = Paint.Style.FILL
        }

        // Paint for the header text
        val headerTextPaint = Paint().apply {
            textSize = 11f
            typeface = Typeface.DEFAULT_BOLD
            color = android.graphics.Color.WHITE // White text
            textAlign = Paint.Align.CENTER
        }
        // Original column widths (before adjustment) - these are proportions/weights
        var eventColWidthsConfig = intArrayOf(70, 90, 90, 70, 50, 90, 45) // Event, Photographers, Videographers, Date, Time, Addons, Price

        // Adjusted column widths and start positions for Events Table
        val actualEventColWidths = IntArray(eventColWidthsConfig.size)
        val eventColStartX = IntArray(eventColWidthsConfig.size)

        if (eventColWidthsConfig.sum() > 0 && tableContentWidth > 0) {
            val totalWeight = eventColWidthsConfig.sum().toFloat()
            var currentX = margin
            for (i in eventColWidthsConfig.indices) {
                // Calculate width based on proportion of tableContentWidth
                actualEventColWidths[i] = (eventColWidthsConfig[i] / totalWeight * tableContentWidth).toInt()
                eventColStartX[i] = currentX
                currentX += actualEventColWidths[i]
            }
            // Adjust the last column to fill the exact space due to potential rounding
            if (actualEventColWidths.isNotEmpty()) {
                actualEventColWidths[actualEventColWidths.size - 1] = tableContentWidth - (eventColStartX[actualEventColWidths.size - 1] - margin)
            }
        } else { // Fallback if no weights or no content width
            var currentX = margin
            for (i in eventColWidthsConfig.indices) {
                eventColStartX[i] = currentX
                actualEventColWidths[i] = if (eventColWidthsConfig.isNotEmpty()) tableContentWidth / eventColWidthsConfig.size else 0 // Basic equal distribution
                currentX += actualEventColWidths[i]
            }
        }


        // Draw Events table header with border
        canvas.drawRect(margin.toFloat(), tableStartY.toFloat(), (pageWidth - margin).toFloat(), (tableStartY + 30).toFloat(), headerBackgroundPaint)

        val headers = arrayOf("Event", "Photographers", "Videographers", "Date", "Time", "Addons", "Price")
        for (i in headers.indices) {
            // Center text within the calculated column width
            canvas.drawText(headers[i], (eventColStartX[i] + actualEventColWidths[i] / 2).toFloat(), (tableStartY + 20).toFloat(), Paint().apply {
                textSize = 11f
                typeface = Typeface.DEFAULT_BOLD
                color = android.graphics.Color.WHITE
                textAlign = Paint.Align.CENTER
            })

            // Draw vertical dividers for header
            if (i > 0) {
                canvas.drawLine(eventColStartX[i].toFloat(), tableStartY.toFloat(), eventColStartX[i].toFloat(), (tableStartY + 30).toFloat(), borderPaint)
            }
        }
        yPosition = tableStartY + 30
        // Event rows data
        val eventss = listOf(
            arrayOf("Engagement", "1 Candid\n1 Traditional", "1 Candid\n1 Traditional", "3-Aug-25", "Morning", "Drone\nDrone\nDrone\nDrone\nDrone", "100000"),
            arrayOf("Haldi", "1 Candid\n1 Traditional", "1 Candid\n1 Traditional", "22-Sep-25", "Morning", "Drone\nDrone\nDrone\nDrone\nDrone", "100000"),
            arrayOf("Nalugu", "1 Traditional", "1 Traditional", "23-Sep-25", "Evening", "Drone\nLED Screen x 1\nLive Streaming", "100000"),
            arrayOf("Wedding", "1 Candid\n1 Traditional", "1 Candid\n2 Traditional", "24-Sep-25", "Evening", "Drone\nLED Screen x 1\nLive Streaming", "100000")
        )

        // Function to calculate required row height
        fun calculateRowHeight(eventData: Array<String>, baseLineHeight: Int = 13, topPadding: Int = 15, bottomPadding: Int = 10): Int {
            val maxLines = eventData.maxOf { cell ->
                cell.split("\n").size
            }
            return topPadding + (maxLines * baseLineHeight) + bottomPadding
        }

        // Draw event rows with dynamic height
        for (eventData in eventss) {
            val rowHeight = calculateRowHeight(eventData)
            checkNewPage(rowHeight)

            // Draw row border, extending to the right margin
            canvas.drawRect(
                margin.toFloat(),
                yPosition.toFloat(),
                (pageWidth - margin).toFloat(),
                (yPosition + rowHeight).toFloat(),
                borderPaint
            )

            // Draw cell content with proper vertical centering
            for (i in eventData.indices) {
                val lines = eventData[i].split("\n")
                val lineCount = lines.size
                val lineHeight = 13

                // Calculate starting Y to center the text block vertically
                val totalTextHeight = lineCount * lineHeight
                var lineY = yPosition + (rowHeight - totalTextHeight) / 2 + 10 // Center vertically

                for (line in lines) {
                    canvas.drawText(
                        line,
                        (eventColStartX[i] + actualEventColWidths[i] / 2).toFloat(),
                        lineY.toFloat(),
                        Paint().apply {
                            textSize = when (i) {
                                1, 2 -> 8f // Photographer/Videographer columns
                                5 -> 8f    // Addons column (smaller text for more lines)
                                else -> 9f
                            }
                            textAlign = Paint.Align.CENTER
                        }
                    )
                    lineY += lineHeight // Line spacing
                }

                // Draw vertical dividers for each column within the row
                if (i > 0) {
                    canvas.drawLine(
                        eventColStartX[i].toFloat(),
                        yPosition.toFloat(),
                        eventColStartX[i].toFloat(),
                        (yPosition + rowHeight).toFloat(),
                        borderPaint
                    )
                }
            }

            yPosition += rowHeight
        }

        /*// Event rows data
        val events = listOf(
            arrayOf("Engagement", "1 Candid\n1 Traditional", "1 Candid\n1 Traditional", "3-Aug-25", "Morning", "Drone\nDrone\nDrone\nDrone\nDrone", "100000"),
            arrayOf("Haldi", "1 Candid\n1 Traditional", "1 Candid\n1 Traditional", "22-Sep-25", "Morning", "Drone\nDrone\nDrone\nDrone\nDrone", "100000"),
            arrayOf("Nalugu", "1 Traditional", "1 Traditional", "23-Sep-25", "Evening", "Drone\nLED Screen x 1\nLive Streaming", "100000"),
            arrayOf("Wedding", "1 Candid\n1 Traditional", "1 Candid\n2 Traditional", "24-Sep-25", "Evening", "Drone\nLED Screen x 1\nLive Streaming", "100000")
        )

        // Draw event rows with proper formatting
        for (eventData in events) {
            val rowHeight = if (eventData[0] == "Wedding") 65 else 45 // Determine row height based on content
            checkNewPage(rowHeight)

            // Draw row border, extending to the right margin
            canvas.drawRect(margin.toFloat(), yPosition.toFloat(), (pageWidth - margin).toFloat(), (yPosition + rowHeight).toFloat(), borderPaint)

            // Draw cell content with better text positioning
            for (i in eventData.indices) {
                val lines = eventData[i].split("\n")
                var lineY = yPosition + if (lines.size == 1) (rowHeight / 2 + 5) else 18 // Adjust initial Y for multi-line text

                for (line in lines) {
                    canvas.drawText(line, (eventColStartX[i] + actualEventColWidths[i] / 2).toFloat(), lineY.toFloat(), Paint().apply {
                        textSize = if (i == 1 || i == 2) 8f else 9f // Smaller text for photographer/videographer columns
                        textAlign = Paint.Align.CENTER
                    })
                    lineY += 13 // Line spacing
                }

                // Draw vertical dividers for each column within the row
                if (i > 0) {
                    canvas.drawLine(eventColStartX[i].toFloat(), yPosition.toFloat(), eventColStartX[i].toFloat(), (yPosition + rowHeight).toFloat(), borderPaint)
                }
            }
            yPosition += rowHeight
        }*/
        yPosition += 30 // Space after events table

        // Photobook Section
        checkNewPage(90) // Approximate height for header + 1 data row
        val photobookTableStartY = yPosition
        val photobookHeaders = arrayOf("Photobook", "Sheets", "Description", "Price")

        val numPhotobookCols = photobookHeaders.size
        val photobookColWidths = IntArray(numPhotobookCols)
        val photobookStartX = IntArray(numPhotobookCols)

        if (numPhotobookCols > 0) {
            val basePhotobookColWidth = tableContentWidth / numPhotobookCols
            var currentPhotobookX = margin
            for (i in 0 until numPhotobookCols - 1) { // All but the last column
                photobookColWidths[i] = basePhotobookColWidth
                photobookStartX[i] = currentPhotobookX
                currentPhotobookX += basePhotobookColWidth
            }
            // Last column takes remaining width to ensure it reaches the margin
            photobookStartX[numPhotobookCols - 1] = currentPhotobookX
            photobookColWidths[numPhotobookCols - 1] = (pageWidth - margin) - currentPhotobookX
        }

        // Photobook header with border, extending to the right margin
        canvas.drawRect(margin.toFloat(), photobookTableStartY.toFloat(), (pageWidth - margin).toFloat(), (photobookTableStartY + 30).toFloat(), headerBackgroundPaint)

        for (i in photobookHeaders.indices) {
            canvas.drawText(photobookHeaders[i], (photobookStartX[i] + photobookColWidths[i] / 2).toFloat(), (photobookTableStartY + 20).toFloat(), Paint().apply {
                textSize = 11f
                typeface = Typeface.DEFAULT_BOLD
                color = android.graphics.Color.WHITE
                textAlign = Paint.Align.CENTER
            })

            // Draw vertical dividers for photobook header
            if (i > 0) {
                canvas.drawLine(photobookStartX[i].toFloat(), photobookTableStartY.toFloat(), photobookStartX[i].toFloat(), (photobookTableStartY + 30).toFloat(), borderPaint)
            }
        }
        yPosition = photobookTableStartY + 30

        // Photobook data row
        val photobookDataRowHeight = 45
        checkNewPage(photobookDataRowHeight)
        canvas.drawRect(margin.toFloat(), yPosition.toFloat(), (pageWidth - margin).toFloat(), (yPosition + photobookDataRowHeight).toFloat(), borderPaint)

        val photobookData = arrayOf("Premium\nAlbums", "3", "80 Silky matte sheets", "235000")
        for (i in photobookData.indices) {
            val lines = photobookData[i].split("\n")
            var lineY = yPosition + if (lines.size == 1) (photobookDataRowHeight / 2 + 5) else 18 // Adjust based on lines

            for (line in lines) {
                canvas.drawText(line, (photobookStartX[i] + photobookColWidths[i] / 2).toFloat(), lineY.toFloat(), Paint().apply {
                    textSize = 10f
                    textAlign = Paint.Align.CENTER
                })
                lineY += 15 // Line spacing
            }

            // Draw vertical dividers for photobook data
            if (i > 0) {
                canvas.drawLine(photobookStartX[i].toFloat(), yPosition.toFloat(), photobookStartX[i].toFloat(), (yPosition + photobookDataRowHeight).toFloat(), borderPaint)
            }
        }
        yPosition += photobookDataRowHeight // Move Y position past the photobook data row
        yPosition += 30 // Space after photobook table
        yPosition +=30
        // Amount Summary
        checkNewPage(100)
        val summaryStartX = pageWidth - margin - 200
        canvas.drawText("Amount", summaryStartX.toFloat(), yPosition.toFloat(), headerPaint)
        yPosition += 30

        canvas.drawText("Subtotal", summaryStartX.toFloat(), yPosition.toFloat(), normalPaint)
        canvas.drawText("235000.00", (summaryStartX + 150).toFloat(), yPosition.toFloat(), normalPaint)
        yPosition += 20

        canvas.drawText("Discount", summaryStartX.toFloat(), yPosition.toFloat(), normalPaint)
        canvas.drawText("0", (summaryStartX + 150).toFloat(), yPosition.toFloat(), normalPaint)
        yPosition += 20

        // Draw line
        canvas.drawLine(summaryStartX.toFloat(), yPosition.toFloat(), (summaryStartX + 180).toFloat(), yPosition.toFloat(), Paint().apply {
            strokeWidth = 2f
            color = android.graphics.Color.BLACK
        })
        yPosition += 15

        canvas.drawText("Total", summaryStartX.toFloat(), yPosition.toFloat(), Paint().apply {
            textSize = 14f
            typeface = Typeface.DEFAULT_BOLD
            color = android.graphics.Color.BLACK
        })
        canvas.drawText("235000.00", (summaryStartX + 150).toFloat(), yPosition.toFloat(), Paint().apply {
            textSize = 14f
            typeface = Typeface.DEFAULT_BOLD
            color = android.graphics.Color.BLACK
        })
    yPosition += 45

    // Terms and Conditions with better formatting
    checkNewPage(350)
   /* canvas.drawText("Terms and Conditions:", margin.toFloat(), yPosition.toFloat(), headerPaint)
    yPosition += 35

    val terms = listOf(
        "1. 50,000/- advance to confirm the booking, Engagement day 30,000/- and balance on event day.",
        "2. Photos and videos will be delivered in 50-65 days, client selected pictures.",
        "3. 80 sheets premium Albums set of 3 premium Albums Additional sheet cost 650 per sheet.",
        "4. Full length engagement wedding Teaser.",
        "5. Four traditional full length videos.",
        "6. On wedding day client have to pay 1,15,000/- Once Album design completed, If any change's Is their we will be",
        "   reedit it.printing sending day have to pay 40,000/-Albums videos will be delivered 15-20 days.",
        "7. Client have to purchase 2 hard disks",
        "8. Advance amount not refundable. Not applicable for another event.",
        "9. Advance 50,000/- Engagement day 30,000/- wedding day 1,15,000/- album printing day 40,000/-.",
        "10. Stay and food Allowances client only Accommodate."
    )

    for (term in terms) {
        checkNewPage(50)
        // Handle long text wrapping with better line management
        if (term.length > 75) {
            val words = term.split(" ")
            var line = ""
            for (word in words) {
                if ((line + word).length > 75) {
                    canvas.drawText(line.trim(), margin.toFloat(), yPosition.toFloat(), smallPaint)
                    yPosition += 20
                    line = word + " "
                } else {
                    line += word + " "
                }
            }
            if (line.isNotEmpty()) {
                canvas.drawText(line.trim(), margin.toFloat(), yPosition.toFloat(), smallPaint)
                yPosition += 20
            }
        } else {
            canvas.drawText(term, margin.toFloat(), yPosition.toFloat(), smallPaint)
            yPosition += 20
        }
    }*/
        canvas.drawText("Terms and Conditions:", margin.toFloat(), yPosition.toFloat(), headerPaint)
        yPosition += 35

        val terms = listOf(
            "1. 50,000/- advance to confirm the booking, Engagement day 30,000/- and balance on event day.",
            "2. Photos and videos will be delivered in 50-65 days, client selected pictures.",
            "3. 80 sheets premium Albums set of 3 premium Albums Additional sheet cost 650 per sheet.",
            "4. Full length engagement wedding Teaser.",
            "5. Four traditional full length videos.",
            "6. On wedding day client have to pay 1,15,000/- Once Album design completed, If any change's Is their we will be reedit it.printing sending day have to pay 40,000/-Albums videos will be delivered 15-20 days.",
            "7. Client have to purchase 2 hard disks",
            "8. Advance amount not refundable. Not applicable for another event.",
            "9. Advance 50,000/- Engagement day 30,000/- wedding day 1,15,000/- album printing day 40,000/-.",
            "10. Stay and food Allowances client only Accommodate."
        )

// Calculate available width for text
        val availableWidth = pageWidth - (2 * margin)

        for (term in terms) {
            // Split term into words
            val words = term.split(" ")
            val lines = mutableListOf<String>()
            var currentLine = ""

            for (word in words) {
                val testLine = if (currentLine.isEmpty()) word else "$currentLine $word"
                val textWidth = smallPaint.measureText(testLine)

                if (textWidth <= availableWidth) {
                    currentLine = testLine
                } else {
                    // Current line is full, save it and start new line
                    if (currentLine.isNotEmpty()) {
                        lines.add(currentLine)
                    }
                    currentLine = word
                }
            }

            // Add the last line
            if (currentLine.isNotEmpty()) {
                lines.add(currentLine)
            }

            // Draw all lines for this term
            for (line in lines) {
                checkNewPage(25)
                canvas.drawText(line, margin.toFloat(), yPosition.toFloat(), smallPaint)
                yPosition += 20
            }

            // Add extra spacing after each term
            yPosition += 5
        }



    // Finish the last page
    pdfDocument.finishPage(page)

    // Save PDF
        val wedstoryesDir = File(
            Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS),
            "wedstoryes/quotations"
        )

        // Create directories if they don't exist
        if (!wedstoryesDir.exists()) {
            wedstoryesDir.mkdirs()
        }

        val file = File(wedstoryesDir, "Komali_Wedding_Quotation.pdf")
        pdfDocument.writeTo(FileOutputStream(file))
        pdfDocument.close()

        onComplete(file)
    } catch (e: Exception) {
        e.printStackTrace()
        onComplete(null)
    }
}

// PDF Preview Function
fun previewPDF(context: Context, file: File) {
    try {
        val uri = FileProvider.getUriForFile(
            context,
            "${context.packageName}.fileprovider",
            file
        )

        val intent = Intent(Intent.ACTION_VIEW).apply {
            setDataAndType(uri, "application/pdf")
            flags = Intent.FLAG_ACTIVITY_NO_HISTORY or Intent.FLAG_GRANT_READ_URI_PERMISSION
        }

        val chooser = Intent.createChooser(intent, "Open PDF")
        if (chooser.resolveActivity(context.packageManager) != null) {
            context.startActivity(chooser)
        } else {
            Toast.makeText(context, "No PDF viewer app found", Toast.LENGTH_SHORT).show()
        }
    } catch (e: Exception) {
        Toast.makeText(context, "Error opening PDF: ${e.message}", Toast.LENGTH_SHORT).show()
    }
}

// Function to share the PDF using an Intent
 fun sharePdf(context: Context, pdfFile: File, targetPackage: String? = null) {
    // Get a content URI for the file using FileProvider
    val uri = FileProvider.getUriForFile(
        context,
        "${context.packageName}.fileprovider", // Must match the authority in AndroidManifest.xml
        pdfFile
    )

    val shareIntent = Intent(Intent.ACTION_SEND).apply {
        type = "application/pdf" // Specify the MIME type for PDF
        putExtra(Intent.EXTRA_STREAM, uri) // Attach the file URI
        addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION) // Grant temporary read permission to the receiving app
        if (targetPackage != null) {
            setPackage(targetPackage) // Optionally target a specific app (e.g., "com.whatsapp")
        }
        putExtra(Intent.EXTRA_SUBJECT, "Wedding Quotation from WedStoryes") // Email subject
        putExtra(Intent.EXTRA_TEXT, "Please find your wedding quotation attached.") // Email body
    }

    try {
        if (targetPackage != null && context.packageManager.queryIntentActivities(shareIntent, PackageManager.MATCH_DEFAULT_ONLY).isEmpty()) {
            Toast.makeText(context, "$targetPackage not installed.", Toast.LENGTH_SHORT).show()
        } else {
            // Start an activity to choose a sharing app (if targetPackage is null)
            // or directly open the targeted app
            context.startActivity(Intent.createChooser(shareIntent, "Share PDF via"))
        }
    } catch (e: Exception) {
        Toast.makeText(context, "Could not share PDF: ${e.message}", Toast.LENGTH_LONG).show()
    }
}
// A4 size: 595 x 842 points (72 DPI)

@Composable
fun QuotationHeader() {
    Text(
        text = "Quotation",
        fontSize = 24.sp,
        fontWeight = FontWeight.Bold,
        modifier = Modifier.fillMaxWidth(),
        textAlign = TextAlign.Center
    )

    Spacer(modifier = Modifier.height(8.dp))

    Text(
        text = "Date: 23-Jul-25",
        fontSize = 14.sp,
        modifier = Modifier.fillMaxWidth(),
        textAlign = TextAlign.Center
    )
}

@Composable
fun LogoSelectionSection(
    selectedLogoUri: Int,
    onLogoClick: () -> Unit,
    onClearLogo: () -> Unit
) {
    val context = LocalContext.current

    Column(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        horizontalAlignment = Alignment.Start
    ) {
        if (selectedLogoUri != null) {
            // Display the selected logo
            val painter = rememberAsyncImagePainter(
                model = selectedLogoUri,
                filterQuality = FilterQuality.Medium, // Adjust for better rendering
                error = painterResource(R.drawable.heart_icon) // Provide a fallback logo
            )

            Image(
                painter = painter,
                contentDescription = "Selected Logo",
                modifier = Modifier
                    .size(100.dp) // Adjust size as needed
                    .clip(RoundedCornerShape(8.dp))
                    .border(1.dp, Color.LightGray, RoundedCornerShape(8.dp))
                    .clickable(onClick = onLogoClick), // Click to change logo
                contentScale = ContentScale.Crop
            )
            Spacer(modifier = Modifier.height(8.dp))
            TextButton(onClick = onClearLogo) {
                Text("Clear Logo", color = MaterialTheme.colorScheme.error)
            }
        } else {
            // Button to pick a logo
            Button(
                onClick = onLogoClick,
                modifier = Modifier.fillMaxWidth(0.6f),
                shape = RoundedCornerShape(12.dp)
            ) {
                Icon(Icons.Default.Add, contentDescription = "Select Logo")
                Spacer(modifier = Modifier.width(8.dp))
                Text("Select Logo")
            }
        }
    }
}


@Composable
fun ClientCompanyInfo(clientDetails: ClientDetails?, ownerDetails: OwnerDetails?) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        // To: Section
        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = "To:",
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = clientDetails?.name.toString(),
                fontSize = 14.sp
            )
            Text(
                text = clientDetails?.email.toString(),
                fontSize = 14.sp
            )
            Text(
                text = "+91 ${clientDetails?.mobileNumber.toString()}",
                fontSize = 14.sp
            )
        }

        // From: Section
        Column(
            modifier = Modifier.weight(1f),
            horizontalAlignment = Alignment.End
        ) {
            Text(
                text = "From:",
                fontSize = 14.sp,
                fontWeight = FontWeight.Bold
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = "The wedstoryes (${ownerDetails?.name})",
                fontSize = 14.sp,
                textAlign = TextAlign.End
            )
            Text(
                text = ownerDetails?.email.toString(),
                fontSize = 14.sp,
                textAlign = TextAlign.End
            )
            Text(
                text = ownerDetails?.mobileNumber.toString(),
                fontSize = 14.sp,
                textAlign = TextAlign.End
            )
        }
    }
}

@Composable
fun EventsTable() {
    // Table Header
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, Color.Black)
            .padding(8.dp)
    ) {
        TableHeaderCell("Event", 0.15f)
        TableHeaderCell("Photographers", 0.2f)
        TableHeaderCell("Videographers", 0.2f)
        TableHeaderCell("Date", 0.15f)
        TableHeaderCell("Time", 0.1f)
        TableHeaderCell("Addons", 0.1f)
        TableHeaderCell("Price", 0.1f)
    }

    // Engagement Row
    EventRow(
        event = "Engagement",
        photographers = "1 Candid\n1 Traditional",
        videographers = "1 Candid\n1 Traditional",
        date = "3-Aug-25",
        time = "Morning",
        addons = "Drone",
        price = "0"
    )

    // Haldi Row
    EventRow(
        event = "Haldi",
        photographers = "1 Candid\n1 Traditional",
        videographers = "1 Candid\n1 Traditional",
        date = "22-Sep-25",
        time = "Morning",
        addons = "Drone",
        price = "0"
    )

    // Nalugu Row
    EventRow(
        event = "Nalugu",
        photographers = "1 Traditional",
        videographers = "1 Traditional",
        date = "23-Sep-25",
        time = "Evening",
        addons = "",
        price = "0"
    )

    // Wedding Row
    EventRow(
        event = "Wedding",
        photographers = "1 Candid\n1 Traditional",
        videographers = "1 Candid\n2 Traditional",
        date = "24-Sep-25",
        time = "Evening",
        addons = "Drone\nLED Screen x 1\nLive Streaming",
        price = "0"
    )
}

@Composable
fun EventRow(
    event: String,
    photographers: String,
    videographers: String,
    date: String,
    time: String,
    addons: String,
    price: String
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, Color.Black)
            .padding(8.dp)
    ) {
        TableCell(event, 0.15f)
        TableCell(photographers, 0.2f)
        TableCell(videographers, 0.2f)
        TableCell(date, 0.15f)
        TableCell(time, 0.1f)
        TableCell(addons, 0.1f)
        TableCell(price, 0.1f)
    }
}

@Composable
fun RowScope.TableHeaderCell(text: String, weight: Float) {
    Text(
        text = text,
        fontSize = 12.sp,
        fontWeight = FontWeight.Bold,
        modifier = Modifier.weight(weight),
        textAlign = TextAlign.Center
    )
}

@Composable
fun RowScope.TableCell(text: String, weight: Float) {
    Text(
        text = text,
        fontSize = 11.sp,
        modifier = Modifier.weight(weight),
        textAlign = TextAlign.Center
    )
}

@Composable
fun PhotobookSection() {
    // Photobook Header
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, Color.Black)
            .padding(8.dp)
    ) {
        TableHeaderCell("Photobook", 0.25f)
        TableHeaderCell("Sheets", 0.25f)
        TableHeaderCell("Description", 0.25f)
        TableHeaderCell("Price", 0.25f)
    }

    // Photobook Row
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, Color.Black)
            .padding(8.dp)
    ) {
        TableCell("Premium\nAlbums", 0.25f)
        TableCell("3", 0.25f)
        TableCell("80 Silky matte sheets", 0.25f)
        TableCell("235000", 0.25f)
    }
}

@Composable
fun TermsAndConditions() {
    Text(
        text = "Terms and Conditions:",
        fontSize = 16.sp,
        fontWeight = FontWeight.Bold
    )

    Spacer(modifier = Modifier.height(8.dp))

    val terms = listOf(
        "1. 50,000/- advance to confirm the booking, Engagement day 30,000/- and balance on event day.",
        "2. Photos and videos will be delivered in 50-65 days, client selected pictures.",
        "3. 80 sheets premium Albums set of 3 premium Albums Additional sheet cost 650 per sheet.",
        "4. Full length engagement wedding Teaser.",
        "5. Four traditional full length videos.",
        "6. On wedding day client have to pay 1,15,000/- Once Album design completed, If any change's Is their we will be reedit it.printing sending day have to pay 40,000/-Albums videos will be delivered 15-20 days.",
        "7. Client have to purchase 2 hard disks",
        "8. Advance amount not refundable. Not applicable for another event.",
        "9. Advance 50,000/- Engagement day 30,000/- wedding day 1,15,000/- album printing day 40,000/-.",
        "10. Stay and food Allowances client only Accommodate."
    )

    terms.forEach { term ->
        Text(
            text = term,
            fontSize = 12.sp,
            modifier = Modifier.padding(bottom = 4.dp)
        )
    }
}

@Composable
fun AmountSummary() {
    Column(
        modifier = Modifier.fillMaxWidth(),
        horizontalAlignment = Alignment.End
    ) {
        Text(
            text = "Amount",
            fontSize = 16.sp,
            fontWeight = FontWeight.Bold
        )

        Spacer(modifier = Modifier.height(8.dp))

        Row(
            modifier = Modifier.width(200.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Subtotal", fontSize = 14.sp)
            Text("235000.00", fontSize = 14.sp)
        }

        Row(
            modifier = Modifier.width(200.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text("Discount", fontSize = 14.sp)
            Text("0", fontSize = 14.sp)
        }

        Divider(
            modifier = Modifier.width(200.dp),
            color = Color.Black,
            thickness = 1.dp
        )

        Row(
            modifier = Modifier.width(200.dp),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            Text(
                "Total",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold
            )
            Text(
                "235000.00",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold
            )
        }
    }
}